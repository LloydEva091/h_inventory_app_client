import { createSelector, createEntityAdapter } from "@reduxjs/toolkit";
import { apiSlice } from "../../app/api/apiSlice";

const recipesAdapter = createEntityAdapter({
  sortComparer: (a, b) =>
    a.completed === b.completed ? 0 : a.completed ? 1 : -1,
});

const initialState = recipesAdapter.getInitialState();

// Use apiSlice to define our endpoints
export const recipesApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // Get all recipes from the API
    getRecipes: builder.query({
      query: () => "/api/recipes",
      validateStatus: (response, result) => {
        return response.status === 200 && !result.isError;
      },
      // Transform the API response to match our normalized data structure
      transformResponse: (responseData) => {
        const loadedRecipes = responseData.map((recipe) => {
          recipe.id = recipe._id;
          return recipe;
        });
        return recipesAdapter.setAll(initialState, loadedRecipes);
      },
      // Invalidate cache for all recipes whenever a new recipe is added or an existing one is updated or deleted
      providesTags: (result, error, arg) => [{ type: "Recipe", id: "LIST" }],
    }),
    // Add a new recipe to the API
    addNewRecipe: builder.mutation({
      query: (initialRecipe) => ({
        url: "/api/recipes",
        method: "POST",
        body: {
          ...initialRecipe,
        },
      }),
      // Invalidate cache for all recipes whenever a new recipe is added
      invalidatesTags: [{ type: "Recipe", id: "LIST" }],
    }),
    // Update an existing recipe in the API
    updateRecipe: builder.mutation({
      query: (initialRecipe) => ({
        url: "/api/recipes",
        method: "PATCH",
        body: {
          ...initialRecipe,
        },
      }),
      // Invalidate cache for the updated recipe
      invalidatesTags: (result, error, arg) => [{ type: "Recipe", id: arg.id }],
    }),
    // Delete an existing recipe from the API
    deleteRecipe: builder.mutation({
      query: ({ id }) => ({
        url: `/api/recipes`,
        method: "DELETE",
        body: { id },
      }),
      // Invalidate cache for the deleted recipe
      invalidatesTags: (result, error, arg) => [{ type: "Recipe", id: arg.id }],
    }),
  }),
});

// Export hooks generated by apiSlice for each endpoint
export const {
  useGetRecipesQuery,
  useAddNewRecipeMutation,
  useUpdateRecipeMutation,
  useDeleteRecipeMutation,
} = recipesApiSlice;

//getSelectors creates these selectors and we rename them with aliases using destructuring
export const {
  selectAll: selectAllRecipes,
  selectById: selectRecipeById,
  selectIds: selectRecipeIds,
  // Pass in a selector that returns the recipes slice of state
} = recipesAdapter.getSelectors(
  (state) => selectRecipesData(state) ?? initialState
);

// returns the query result object
export const selectRecipesResult =
  recipesApiSlice.endpoints.getRecipes.select();
  

// creates memoized selector
const selectRecipesData = createSelector(
  selectRecipesResult,
  (recipesResult) => {
    if (recipesResult.isLoading || !recipesResult.data) {
      return undefined;
    }
    return recipesResult.data; // normalized state object with ids & entities
  }
);
//console.log(selectRecipesData)

// Selector to get all recipes by a specific user ID
export const selectRecipeByUserId = createSelector(
  // Use the `selectRecipesData` selector to get all recipes from the state
  [selectRecipesData, (state, userId) => userId],

  // Filter recipes by the given user ID
  (recipes, userId) => {
    if (!recipes) {
      return [];
    } else {
      return recipes.filter((recipe) => recipe.user === userId);
    }
  }
);

